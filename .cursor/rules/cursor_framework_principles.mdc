# Cursor框架设计原则

## 核心设计理念

1. **纯规则驱动**：
   - 框架完全基于.mdc规则文件驱动，不依赖Python代码
   - 规则以Markdown文档形式存在，由AI助手直接解释和执行
   - 使用Cursor原生工具（如edit_file、read_file等）实现功能

2. **目录结构简化**：
   - `.cursor/rules/` - 存放规则文件
   - `.cursor/contexts/` - 存放会话上下文
   - `.cursor/states/` - 存放状态信息
   - `.cursor/backups/` - 存放备份文件
   - `docs/` - 存放文档和指南

3. **规则文件设计原则**：
   - 每个规则文件专注于单一职责
   - 使用清晰的Markdown结构组织内容
   - 包含具体的示例和使用场景
   - 明确规则的触发条件和执行流程

4. **多智能体协作原则**：
   - 各角色通过规则文件定义行为和职责
   - 使用会话上下文和状态文件维护连续性
   - 角色之间通过明确的规则和协议进行协作

## 技术实现要点

1. **状态管理**：
   - 使用JSON格式存储状态和上下文信息
   - 定期创建备份确保数据安全
   - 通过会话总结文件记录重要决策和进展

2. **工具使用**：
   - 优先使用Cursor提供的原生工具
   - 不引入外部依赖和复杂实现
   - 保持工具使用的简单性和可靠性

3. **文档组织**：
   - 使用统一的文档模板
   - 保持文档结构的一致性
   - 确保文档的可读性和可维护性

## 错误防范

1. **常见错误**：
   - 避免引入不必要的Python代码或外部依赖
   - 避免过度复杂的实现方案
   - 避免重复或冗余的规则定义

2. **最佳实践**：
   - 保持规则文件的简洁和清晰
   - 定期检查和更新规则文件
   - 确保规则之间的一致性

## 设计决策记录

1. **为什么不使用Python代码**：
   - 规则系统本质上是指导性的，不需要编程语言实现
   - 减少维护成本和复杂性
   - 提高系统的可靠性和可预测性

2. **为什么使用Markdown文档**：
   - 易于阅读和维护
   - 支持丰富的文档结构
   - 便于版本控制和协作

## 注意事项

1. 在设计新规则时，始终遵循这些核心原则
2. 定期审查规则文件，确保符合设计理念
3. 避免引入不必要的复杂性
4. 保持文档的及时更新和完整性 