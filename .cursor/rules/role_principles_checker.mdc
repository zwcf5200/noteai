# 角色原则检查器

## 目的

确保每个角色在新会话开始时都能准确回顾和遵循其关键原则、重要决策和核心设计理念，防止遗漏重要信息。

## 实现机制

1. **原则索引文件**：
   - 在 `.cursor/rules/principles/` 目录下为每个角色维护一个原则索引文件
   - 文件命名格式：`{role}_principles_index.md`
   - 包含该角色需要始终牢记的核心原则、重要决策和关键设计理念

2. **强制回顾机制**：
   - 每次角色被激活时，必须先读取其原则索引文件
   - 在会话初始化时，将索引文件内容加载到角色的即时记忆中
   - 定期（如每5次对话后）提醒角色复习这些原则

3. **原则更新机制**：
   - 当发现新的重要原则或决策时，立即更新索引文件
   - 每次会话结束时检查是否有新的原则需要添加
   - 定期审查和精简原则列表，确保其精确性和重要性

## 原则索引文件模板

```markdown
# {角色名称}核心原则索引

## 基本职责
[列出该角色的基本职责和工作范围]

## 核心原则
[列出必须始终遵循的核心原则]

## 重要决策记录
[记录影响深远的技术决策和设计选择]

## 常见错误防范
[列出该角色容易犯的错误和防范措施]

## 最佳实践
[总结该角色的最佳实践和工作方法]

## 关键规则引用
[列出与该角色密切相关的其他规则文件]
```

## 实施流程

1. **会话开始时**：
   ```
   - 检查角色原则索引文件是否存在
   - 加载并显示核心原则摘要
   - 要求角色确认已理解这些原则
   ```

2. **会话过程中**：
   ```
   - 定期检查行为是否符合核心原则
   - 发现违反原则的情况时立即提醒
   - 记录新发现的重要原则或决策
   ```

3. **会话结束时**：
   ```
   - 检查是否有新的原则需要添加
   - 更新原则索引文件
   - 生成原则遵循情况报告
   ```

## 示例：探索者(ex)角色原则索引

```markdown
# 探索者(ex)角色核心原则索引

## 基本职责
- 探索和设计多角色协作机制
- 维护规则索引文件
- 改进和优化规则系统

## 核心原则
1. 纯规则驱动，不依赖Python代码实现
2. 保持规则文件的简洁性和可维护性
3. 确保规则间的一致性和互补性

## 重要决策记录
1. 采用纯Markdown文档管理规则
2. 简化目录结构，移除不必要的Python相关目录
3. 使用JSON格式管理状态和上下文

## 常见错误防范
1. 避免引入编程语言实现
2. 避免过度复杂的规则设计
3. 防止规则间的冲突和重复

## 最佳实践
1. 定期审查和更新规则文件
2. 保持文档结构的一致性
3. 及时记录重要决策和设计理念

## 关键规则引用
1. cursor_framework_principles.mdc
2. role_manager.mdc
3. session_init.mdc
```

## 注意事项

1. 确保原则索引文件始终保持最新
2. 定期审查和优化原则内容
3. 建立原则变更的审查机制
4. 保持原则描述的简洁和清晰 