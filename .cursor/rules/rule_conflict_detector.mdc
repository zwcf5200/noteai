---
description: 为确保规则系统的一致性和可靠性，规则冲突检测器会自动分析所有规则文件，识别可能导致冲突、重叠或不确定行为的规则组合。
globs:
alwaysApply: false
---
# 规则冲突检测器

为确保规则系统的一致性和可靠性，规则冲突检测器会自动分析所有规则文件，识别可能导致冲突、重叠或不确定行为的规则组合。

## 检测时机

1. **定期自动检测**：
   - 每当添加新规则或修改现有规则时
   - 每7天自动运行一次完整检测
   - 在规则评估报告生成前执行

2. **手动触发检测**：
   - 用户输入`/check-rules`或`/检查规则`时
   - 用户明确表示遇到规则冲突问题时

## 冲突类型识别

1. **模式冲突**：
   - 检测具有重叠`pattern`或`glob`参数的规则
   - 分析规则的应用条件，识别可能导致多规则同时触发的场景
   - 评估规则优先级和执行顺序问题

2. **行为冲突**：
   - 识别指导行为相互矛盾的规则
   - 检测规则指令间的语义冲突
   - 分析规则组合是否产生不一致的智能体行为

3. **资源冲突**：
   - 检测多个规则同时要求访问或修改相同资源的情况
   - 识别可能导致资源竞争或死锁的规则组合
   - 评估规则执行的资源开销和效率问题

## 冲突分析方法

1. **静态分析**：
   - 解析规则文件的结构和内容
   - 构建规则依赖和影响关系图
   - 应用形式化方法检测潜在冲突

2. **历史数据分析**：
   - 分析规则评估报告中记录的规则触发情况
   - 识别历史会话中出现的规则冲突
   - 学习识别导致用户困惑或不满的规则组合

3. **语义理解**：
   - 分析规则指令的语义内容
   - 评估规则目标的一致性和互补性
   - 识别可能导致指令歧义的情况

## 冲突严重性评级

对每个检测到的冲突按严重性分级：

1. **严重** (Critical)：
   - 导致规则系统无法正常工作
   - 产生明显矛盾的行为指令
   - 可能导致数据丢失或重要功能失效

2. **警告** (Warning)：
   - 可能导致非预期但不严重的行为
   - 规则执行效率显著降低
   - 用户体验不一致但功能基本可用

3. **提示** (Notice)：
   - 规则存在重叠但不太可能导致问题
   - 规则组织或结构可以优化
   - 建议性改进而非必须修复

## 冲突报告格式

检测到冲突后，生成结构化报告：

```python
# 获取当前时间
current_date = run_terminal_cmd("date '+%Y-%m-%d'").strip()

# 报告模板
report = f"""# 规则冲突检测报告 ({current_date})

## 摘要
- 分析的规则总数: [数量]
- 检测到的冲突总数: [数量]
- 严重冲突: [数量]
- 警告级别冲突: [数量]
- 提示级别问题: [数量]

## 详细冲突列表

### 严重冲突

1. **[冲突ID]**: [简短描述]
   - **涉及规则**: `[规则1]`, `[规则2]`
   - **冲突类型**: [模式冲突/行为冲突/资源冲突]
   - **详细描述**: [具体问题描述]
   - **修复建议**: [具体解决方案]

### 警告级别

1. **[冲突ID]**: [简短描述]
   - **涉及规则**: `[规则1]`, `[规则2]`
   - **冲突类型**: [模式冲突/行为冲突/资源冲突]
   - **详细描述**: [具体问题描述]
   - **修复建议**: [具体解决方案]

### 提示级别

1. **[冲突ID]**: [简短描述]
   - **涉及规则**: `[规则1]`, `[规则2]`
   - **详细描述**: [具体问题描述]
   - **优化建议**: [具体解决方案]

## 规则依赖关系图
[文本形式的依赖关系图]

## 行动建议
1. [具体建议]
2. [具体建议]
```

## 修复建议生成

对于每个冲突，提供以下修复建议：

1. **规则修改方案**：
   - 具体的规则修改建议，包括修改哪些参数或条件
   - 提供修改后的规则代码示例

2. **规则合并方案**：
   - 当两个规则功能重叠时，提供合并为一个规则的方案
   - 确保合并后的规则覆盖所有原有功能

3. **规则优先级调整**：
   - 建议添加优先级标记以明确规则执行顺序
   - 确保高优先级规则不会被低优先级规则覆盖

## 实施流程

1. **检测启动**：
   ```python
   # 获取时间戳用于文件命名
   timestamp = run_terminal_cmd("date '+%Y%m%d_%H%M%S'").strip()
   report_file = f"docs/rules-evaluation/conflict-{timestamp}.md"
   ```

2. **报告生成**：
   - 将检测结果保存到`docs/rules-evaluation/conflict-{timestamp}.md`
   - 为每个冲突分配唯一ID，便于跟踪

3. **用户通知**：
   - 严重冲突立即通知用户
   - 警告级别冲突在适当时机提示
   - 提示级别问题在规则评估报告中附加

4. **反馈收集**：
   - 记录用户对冲突报告的反馈
   - 改进冲突检测算法
   - 追踪冲突解决进度

## 处理命令

当用户输入以下命令时，触发规则冲突检测：

1. `/check-rules`
2. `/检查规则`
3. `/规则冲突`
4. `/rule-conflicts`

触发后，使用以下格式回复：

```
我将检查所有规则是否存在冲突或重叠。检测完成后，我会生成详细报告并提供修复建议。

规则检测中...
```

完成检测后，提供检测结果摘要和报告位置：

```
规则冲突检测已完成。

检测结果摘要：
- 分析规则总数: [数量]
- 检测到 [数量] 个严重冲突
- 检测到 [数量] 个警告级别冲突
- 检测到 [数量] 个提示级别问题

详细报告已保存至: docs/rules-evaluation/conflict-{timestamp}.md

您希望我介绍最严重的冲突问题吗？