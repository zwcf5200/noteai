---
description: 新会话初始化:自动查找最新资料和上次会话总结
globs:
alwaysApply: false
---

# 新会话初始化规则

## 时间处理规范

1. **会话时间记录**：
   - 会话开始时间：使用ISO格式（YYYY-MM-DDThh:mm:ss±hh:mm）
   - 上次会话时间：使用ISO格式
   - 显示时间：使用人类可读格式（YYYY-MM-DD HH:mm:ss）

2. **时间获取方式**：
   - ISO格式：`date --iso-8601=seconds`
   - 显示格式：`date '+%Y-%m-%d %H:%M:%S'`
   - 文件名格式：`date '+%Y-%m-%d-%H-%M-%S'`

3. **时间显示规范**：
   ```
   会话开始：{YYYY-MM-DD HH:mm:ss}
   上次会话：{YYYY-MM-DD HH:mm:ss}
   持续时间：{小时}h {分钟}m
   ```

## 会话状态格式

```json
{
  "session_id": "会话ID",
  "start_time": "2025-03-25T19:45:30+08:00",
  "last_session": {
    "end_time": "2025-03-25T18:45:30+08:00",
    "duration": "3600",
    "summary_file": "ex-guide-2025-03-25-18-45-30.md"
  },
  "current_role": {
    "code": "ex",
    "activation_time": "2025-03-25T19:45:30+08:00"
  }
}
```

## 错误处理规范

1. **时间获取错误**：
   - 记录错误日志
   - 使用备用时间获取方式
   - 通知用户时间获取异常

2. **时间格式验证**：
   - 验证ISO格式时间
   - 验证文件名时间戳格式
   - 验证显示时间格式

3. **时区处理**：
   - 统一使用系统时区
   - 在存储时包含时区信息
   - 在显示时转换为本地时间

## 会话初始化流程

1. **获取当前时间**：
   ```
   会话时间：{YYYY-MM-DD HH:mm:ss}
   时区信息：{±hh:mm}
   ```

2. **加载上次会话信息**：
   ```
   上次会话：{YYYY-MM-DD HH:mm:ss}
   结束时间：{YYYY-MM-DD HH:mm:ss}
   持续时间：{时长}
   ```

3. **显示会话连续性信息**：
   ```
   距上次：{天数}天 {小时}小时
   总会话：{次数}次
   累计时长：{小时}h {分钟}m
   ```

## 注意事项

1. 所有时间记录必须遵循统一的格式标准
2. 会话时间必须包含时区信息
3. 显示时间时使用人类可读格式
4. 必须正确处理时区转换
5. 时间相关的错误必须妥善处理
6. 定期验证时间记录的准确性
7. 保持会话时间记录的连续性

当开始新的会话或激活角色时，自动查找最新的Cursor资料和角色对应的上次会话总结，帮助智能体快速了解项目背景和上下文。

## 触发条件

会话初始化自动触发于以下情况：

1. **新会话开始**：用户开启一个全新的会话
2. **角色激活**：用户激活特定角色（如`/pm`、`/ar`、`/ex`等）
3. **手动触发**：用户输入`/init`、`/初始化`或明确请求初始化

## 自动执行流程

会话初始化时，智能体应自动执行以下操作：

1. **自我角色识别**：
   - 从当前激活命令识别角色（如`/ex`表示探索者角色）
   - 如用户未明确指定，从状态文件获取当前角色
   - 如无法确定，默认使用探索者(ex)角色

2. **恢复角色上下文**：
   - 加载上下文文件(`.cursor/contexts/{role}_context.json`)
   - 如上下文文件不存在，尝试从备份恢复
   - 解析当前任务、进度和未完成事项
   - 恢复关注的文件列表和关键决策记录

3. **查找最新会话总结**：
   - 检索`docs/agent-guides/`目录中以该角色代号开头的最新总结文件
   - 例如，若角色为"ex"，则查找最新的`ex-guide-*.md`文件
   - 阅读该文件内容，特别关注"错误防范"和"待办事项"部分
   - 提取关键信息以供当前会话使用

4. **检查相关文件变更**：
   - 识别自上次会话以来的文件变更
   - 区分用户变更和智能体变更
   - 确定与当前角色相关的重要变更
   - 生成变更摘要以供参考

5. **搜索最新Cursor资料**：
   - 执行网络搜索获取Cursor的最新文档、特性和最佳实践
   - 参考`cursor_latest_info.mdc`中定义的搜索规则
   - 仅在必要时执行此步骤，避免不必要的网络请求

6. **汇总信息并提供给用户**：
   - 生成结构化的初始化摘要
   - 向用户简要汇报已了解的上下文信息
   - 主动提醒上次会话中未完成的任务和已知问题
   - 显示文件变更摘要和建议关注点

## 会话开始问候模板

在新会话开始或角色激活时，使用以下模板生成问候信息：

```markdown
# ${role_display_name}角色已激活

## 上次会话概要 (${last_session_date})
- ${last_session_summary}

## 当前任务
- ${current_task_description} (进度: ${progress}%)
- 开始时间: ${task_start_time}
- 预计完成: ${expected_completion}

## 待处理事项
${incomplete_tasks}

## 注意事项
${warnings_from_error_prevention}

## 相关文件变更 (${changes_count}项)
${file_changes_summary}

我已准备好以${role_display_name}的身份继续工作。您想从哪个方面开始？
```

## 找不到历史记录时的处理

如果找不到上下文文件和会话总结，则创建新的上下文并使用以下模板提示用户：

```markdown
# ${role_display_name}角色已激活

我没有找到之前${role_display_name}角色的会话记录和上下文信息。

我已创建新的角色上下文，为了更好地协助您，请简要说明：
1. 您当前的主要任务是什么？
2. 有哪些关键文件或资源需要关注？
3. 是否有特别需要注意的问题或限制？

我将根据您的回答初始化工作环境。
```

## 连续性保障机制

为确保会话的连续性，实现以下机制：

1. **上下文检查点**：
   - 在会话进行过程中定期保存状态
   - 在关键操作（如文件编辑）后更新上下文
   - 确保即使异常终止也能恢复大部分进度

2. **自动恢复**：
   - 如果检测到上次会话异常终止，主动提供恢复选项
   - 在恢复时明确指出可能丢失的信息
   - 建议继续处理的最佳方式

3. **变更跟踪**：
   - 使用Git历史或文件比较识别变更
   - 关联变更与任务进度
   - 提供智能的变更摘要和建议

## 实施注意事项

- 确保在会话开始的第一条消息或角色激活后立即执行初始化
- 优化文件读取操作，避免不必要的文件系统访问
- 平衡信息的完整性和简洁性，避免过度冗长的开场白
- 根据用户反馈动态调整初始化过程和显示内容
- 处理各种异常情况，如文件不存在、损坏或权限问题

## 命令处理

除了自动触发外，还支持以下手动命令：

- `/init` 或 `/初始化` - 手动触发完整初始化
- `/init brief` 或 `/初始化简要` - 执行简化版初始化
- `/show-context` 或 `/显示上下文` - 显示当前上下文信息
- `/reset-context` 或 `/重置上下文` - 重置当前角色上下文（需确认）